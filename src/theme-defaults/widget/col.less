@import '../variable.less';
@col-prefix-cls: ~"@{css-prefix}col";

[class*='ovu-col-'] {
  float: left;
  box-sizing: border-box;
}

.ovu-col-0 {
  display: none;
}

.loop-generate-columns(@index) when (@index =< @--grid-columns) {
  .@{col-prefix-cls}-@{index} {
    width: percentage((@index / @--grid-columns));
  }

  .@{col-prefix-cls}-offset-@{index} {
    margin-left: percentage((@index / @--grid-columns));
  }

  .@{col-prefix-cls}-push-@{index} {
    position: relative;
    left: percentage((@index / @--grid-columns));
  }

  .@{col-prefix-cls}-pull-@{index} {
    position: relative;
    right: percentage((@index / @--grid-columns));
  }

  .loop-generate-columns((@index + 1))
}

.loop-generate-columns(1);

// 生成响应式栅格
.generate-columns-res(@class) {
  .col(@index) {
    @item: ~".@{col-prefix-cls}-@{class}-@{index}";
    .col((@index + 1), @item)
  }

  .col(@index, @list) when (@index =< @--grid-columns) {
    @item: ~".@{col-prefix-cls}-@{class}-@{index}";
    .col((@index + 1), ~"@{list}, @{item}")
  }

  .col(@index, @list) when (@index > @--grid-columns) {
    @{list} {
      float: left;
      flex: 0 0 auto;
    }
  }

  .col(1)
}

.loop-generate-columns-res(@index, @class) when (@index > 0) {
  .@{col-prefix-cls}-@{class}-@{index} {
    width: percentage((@index / @--grid-columns));
  }

  .@{col-prefix-cls}-@{class}--offset-@{index} {
    margin-left: percentage((@index / @--grid-columns));
  }

  .@{col-prefix-cls}-@{class}-push-@{index} {
    position: relative;
    left: percentage((@index / @--grid-columns));
  }

  .@{col-prefix-cls}-@{class}-pull-@{index} {
    position: relative;
    right: percentage((@index / @--grid-columns));
  }

  .loop-generate-columns-res((@index - 1), @class);
}

.loop-generate-columns-res(@index, @class) when (@index = 0) {
  .@{col-prefix-cls}-@{class}-@{index} {
    display: none;
  }

  .@{col-prefix-cls}-@{class}-push-@{index} {
    position: relative;
    left: auto;
  }

  .@{col-prefix-cls}-@{class}-pull-@{index} {
    position: relative;
    right: auto;
  }
}

.make-columns-res(@class: ~'') {
  .generate-columns-res(@class);
  .loop-generate-columns-res(@--grid-columns, @class);
}

.loop-columns(@list, @i: 1) when (@i =< length(@list)) {
  @class: extract(@list, @i);

  .make-columns-res(@class);

  .loop-columns(@list, (@i + 1));
}

@classes: xs, sm, md, lg, xl, xxl;
.loop-columns(@classes);

